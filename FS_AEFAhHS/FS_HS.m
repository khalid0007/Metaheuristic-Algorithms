function [harmonyMemory, finalPerformance] = FS_HS(harmonyMemory)
% Feature selection using Harmony Search
% Paper : "A New Heuristic Optimization Algorithm : Harmony Search"\ 
% Author : Zong Woo Geem and Joong Hoon K1im, G. V. Loganathan
% 
% <STEPS OF HARMOMY SEARCH ALGORITH>
% Step 1. Initialize a Harmony Memory (HM).
% Step 2. Improvise a new harmony from HM.
% Step 3. If the new harmony is better than minimum harmony in HM,
%         include the new harmony in HM, and exclude the minimum harmony from HM.
% Step 4. If stopping criteria are not satisfied, go to Step 2.
% <=================================>
% 
% 
% Here each feature is considered a musical instrument
% and each musical instrument aka. feature has two tones 
% 1 and 0 : 1 represents the selection of the the particular feature
% (instrument), 0 represent the oposite operation
% 
% AIM
% Our aim is to select a most optimum feature set using harmony search
% algorithm
% 
% 
% Code Author: Khalid Hassan Sheikh
% BCSE, Jadavpur University (2018-2022)
% 
% parameter: train and test features and class labels
% output : Final selected featues with optimal accuracy 
global trainFeatures trainLabels testFeatures testLabels classifierName paramValue;

% <Frequently used variables> %
featureLength = size(trainFeatures, 2);
countHarmony = size(harmonyMemory, 1);
accuracyThresold = 1.00;
% <\Frequently used variables> %

% <Intialisation> %


% All features selected

harmonyMemory = specialSort(harmonyMemory);

for iteration = 1:1
    chromosome = zeros(1, featureLength);

    for i = 1:featureLength
        randomIndex = randi(countHarmony);
        chromosome(i) = harmonyMemory(randomIndex, i);
    end
    
    % <\Improvise> %
    performanceScore = calFitness(trainFeatures, trainLabels, testFeatures, testLabels, chromosome, classifierName, paramValue);
    
    % If better hramony is generated by improvisation replace the minimum
    % quality harmony from harmony memory
    % <Better Harmony Generation> %
    if performanceScore > harmonyMemory(countHarmony, featureLength + 1)
        harmonyMemory(countHarmony, :) = [chromosome, performanceScore];
        % Sort according to performanceScore
        harmonyMemory = specialSort(harmonyMemory);
    end
    
    
    finalAgent = harmonyMemory(1, 1:featureLength);
    finalPerformance = modifiedClassify(trainFeatures, trainLabels, testFeatures, testLabels, finalAgent, classifierName, paramValue);
    % <\Stopping Criterion> %
end
fprintf("Final Accuracy: %f\n", finalPerformance);

end

